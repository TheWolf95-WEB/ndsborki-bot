import os
import json
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram import ReplyKeyboardRemove
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)
from utils.permissions import ALLOWED_USERS
from utils.db import load_weapon_types
from utils.translators import load_translation_dict
from utils.keyboards import build_keyboard_with_main

WEAPON_NAME, ROLE_INPUT, CATEGORY_SELECT, MODE_SELECT, TYPE_CHOICE, MODULE_COUNT, MODULE_SELECT, IMAGE_UPLOAD, CONFIRMATION, POST_CONFIRM = range(10)
DB_PATH = "database/builds.json"

async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return ConversationHandler.END

    await update.message.reply_text(
        "üõ† <b>–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–æ–∫ –≤–∫–ª—é—á—ë–Ω</b>\n\n"
        "üìå –°–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–±–æ—Ä–∫—É.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ—Å—Ç–∏ <code>/cancel</code>, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        parse_mode="HTML"
    )

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è:", reply_markup=ReplyKeyboardRemove())
    return WEAPON_NAME

async def get_weapon_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("‚öôÔ∏è get_weapon_name called")
    context.user_data['weapon'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –î–∏—Å—Ç–∞–Ω—Ü–∏—é –æ—Ä—É–∂–∏—è")
    return ROLE_INPUT


async def get_weapon_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['role'] = update.message.text
    buttons = [["–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞"], ["–ú–µ—Ç–∞"], ["–ù–æ–≤–∏–Ω–∫–∏"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return CATEGORY_SELECT

async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['category'] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=ReplyKeyboardMarkup([["Warzone"]], resize_keyboard=True))
    return MODE_SELECT

async def get_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = update.message.text
    weapon_types = load_weapon_types()
    key_to_label = {item["key"]: item["label"] for item in weapon_types}

    import json
    with open(DB_PATH, 'r', encoding='utf-8') as f:
        data = json.load(f)

    available_keys = sorted(set(
        b['type'] for b in data
        if b.get("mode", "").lower() == context.user_data['mode'].lower()
        and b.get("category") == context.user_data.get("category")
    ))

    context.user_data['type_map'] = {key: key_to_label.get(key, key) for key in available_keys}
    labels = list(context.user_data['type_map'].values())
    buttons = [labels[i:i+2] for i in range(0, len(labels), 2)]

    
    await update.message.reply_text("‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤...", reply_markup=ReplyKeyboardRemove())
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return TYPE_CHOICE

async def get_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_label = update.message.text.strip()
    weapon_types = load_weapon_types()
    label_to_key = {item["label"]: item["key"] for item in weapon_types}
    selected_key = label_to_key.get(selected_label)

    if not selected_key:
        await update.message.reply_text("‚ùå –¢–∏–ø –æ—Ä—É–∂–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return TYPE_CHOICE

    context.user_data['type'] = selected_key

    file_map = {
        "assault": "modules-assault.json",
        "battle": "modules-battle.json",
        "smg": "modules-pp.json",
        "shotgun": "modules-drobovik.json",
        "marksman": "modules-pehotnay.json",
        "lmg": "modules-pulemet.json",
        "sniper": "modules-snayperki.json",
        "pistol": "modules-pistolet.json",
        "special": "modules-osoboe.json"
    }

    filename = file_map.get(selected_key)
    if not filename:
        await update.message.reply_text("‚ùå –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è –º–æ–¥—É–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return ConversationHandler.END

    with open(f"database/{filename}", "r", encoding="utf-8") as f:
        module_data = json.load(f)

    context.user_data['module_variants'] = module_data
    context.user_data['module_options'] = list(module_data.keys())

    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π:", reply_markup=ReplyKeyboardMarkup([["5"], ["8"]], resize_keyboard=True))
    return MODULE_COUNT

async def get_module_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['module_count'] = int(update.message.text)
    context.user_data['selected_modules'] = []
    context.user_data['detailed_modules'] = {}
    buttons = [context.user_data['module_options'][i:i+2] for i in range(0, len(context.user_data['module_options']), 2)]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return MODULE_SELECT

async def select_modules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    module = update.message.text
    if module not in context.user_data['module_options'] or module in context.user_data['selected_modules']:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å.")
        return MODULE_SELECT

    context.user_data['current_module'] = module
    variants = context.user_data['module_variants'].get(module, [])
    context.user_data['variant_translation'] = {v['en']: v['ru'] for v in variants}
    keyboard = [[InlineKeyboardButton(v['en'], callback_data=v['en'])] for v in variants]

    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è {module}:", reply_markup=InlineKeyboardMarkup(keyboard))
    return MODULE_SELECT

async def module_variant_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    variant = query.data
    current_module = context.user_data.get('current_module')

    if not current_module:
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return MODULE_SELECT

    context.user_data['detailed_modules'][current_module] = variant
    if current_module not in context.user_data['selected_modules']:
        context.user_data['selected_modules'].append(current_module)

    if len(context.user_data['selected_modules']) >= context.user_data['module_count']:
        await query.edit_message_reply_markup(reply_markup=None)
        context.user_data.pop('current_module', None)
        context.user_data['waiting_image'] = True
        await query.message.reply_text("üì∑ –í—Å–µ –º–æ–¥—É–ª–∏ –≤—ã–±—Ä–∞–Ω—ã.\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏:")
        return IMAGE_UPLOAD

    remaining = [m for m in context.user_data['module_options'] if m not in context.user_data['selected_modules']]
    buttons = [remaining[i:i+2] for i in range(0, len(remaining), 2)]
    context.user_data['current_module'] = None
    await query.edit_message_reply_markup(reply_markup=None)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º–æ–¥—É–ª—å:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return MODULE_SELECT

async def reject_early_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –º–æ–¥—É–ª–∏. –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    return MODULE_SELECT

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = None
    if update.message.photo:
        file = await update.message.photo[-1].get_file()
    elif update.message.document and update.message.document.mime_type.startswith("image/"):
        file = await update.message.document.get_file()
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª.")
        return IMAGE_UPLOAD

    os.makedirs("images", exist_ok=True)
    path = f"images/{context.user_data['weapon'].replace(' ', '_')}.jpg"
    await file.download_to_drive(path)
    context.user_data['image'] = path

    await update.message.reply_text(
        "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É, –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å.",
        reply_markup=ReplyKeyboardMarkup([["–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return CONFIRMATION

async def confirm_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_build = {
        "weapon_name": context.user_data['weapon'],
        "role": context.user_data.get('role', ''),
        "category": context.user_data.get("category", "–ú–µ—Ç–∞"),
        "mode": context.user_data['mode'],
        "type": context.user_data['type'],
        "modules": context.user_data['detailed_modules'],
        "image": context.user_data['image'],
        "author": update.effective_user.full_name
    }

    if os.path.exists(DB_PATH):
        with open(DB_PATH, 'r') as f:
            data = json.load(f)
    else:
        data = []
    data.append(new_build)
    with open(DB_PATH, 'w') as f:
        json.dump(data, f, indent=2)

    keyboard = [["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Å–±–æ—Ä–∫—É"], ["‚óÄ –û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return POST_CONFIRM

add_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É"), add_start),
        CommandHandler("add", add_start),
    ],
    states={
        WEAPON_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weapon_name)],
        ROLE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weapon_role)],
        CATEGORY_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_category)],
        MODE_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_mode)],
        TYPE_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_type)],
        MODULE_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_module_count)],
        MODULE_SELECT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, select_modules),
            MessageHandler(filters.PHOTO | filters.Document.IMAGE, reject_early_image),
            CallbackQueryHandler(module_variant_callback),
        ],
        IMAGE_UPLOAD: [MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_image)],
        CONFIRMATION: [
            MessageHandler(filters.TEXT & filters.Regex("^–ó–∞–≤–µ—Ä—à–∏—Ç—å$"), confirm_build),
            MessageHandler(filters.Regex("–û—Ç–º–µ–Ω–∞"), lambda u, c: u.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")),
        ],
        POST_CONFIRM: [
            MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Å–±–æ—Ä–∫—É"), add_start),
            MessageHandler(filters.Regex("‚óÄ –û—Ç–º–µ–Ω–∞"), lambda u, c: u.message.reply_text("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")),
        ],
    },
    fallbacks=[
        CommandHandler("cancel", lambda u, c: u.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")),
    ]
)
