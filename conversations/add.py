# conversations/add.py

import os
import json
import logging
import pathlib
import traceback

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from utils.permissions import admin_only
from utils.db import load_weapon_types

HERE = pathlib.Path(__file__).resolve().parent
ROOT = HERE.parent
DB_PATH = ROOT / "database" / "builds.json"

# –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
(
    WEAPON_NAME,
    ROLE_INPUT,
    CATEGORY_SELECT,
    MODE_SELECT,
    TYPE_CHOICE,
    MODULE_COUNT,
    MODULE_SELECT,
    IMAGE_UPLOAD,
    CONFIRMATION,
    POST_CONFIRM
) = range(10)


@admin_only
async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† <b>–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–æ–∫ –≤–∫–ª—é—á—ë–Ω</b>\n\n"
        "üìå –°–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–±–æ—Ä–∫—É.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ—Å—Ç–∏ <code>/cancel</code>, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        parse_mode="HTML"
    )
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è:", reply_markup=ReplyKeyboardRemove())
    return WEAPON_NAME


async def get_weapon_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['weapon'] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –æ—Ä—É–∂–∏—è:")
    return ROLE_INPUT


async def get_weapon_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['role'] = update.message.text.strip()
    buttons = [["–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞"], ["–ú–µ—Ç–∞"], ["–ù–æ–≤–∏–Ω–∫–∏"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return CATEGORY_SELECT


async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['category'] = update.message.text.strip()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=ReplyKeyboardMarkup([["Warzone"]], resize_keyboard=True)
    )
    return MODE_SELECT


async def get_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = update.message.text.strip()

    weapon_types = load_weapon_types()
    if not weapon_types:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    context.user_data['type_map'] = {wt['key']: wt['label'] for wt in weapon_types}
    labels = list(context.user_data['type_map'].values())
    buttons = [labels[i:i+2] for i in range(0, len(labels), 2)]

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return TYPE_CHOICE


# --- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ –≤—ã–∑–æ–≤–∞ add_conv! ---
async def get_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected = update.message.text.strip()
    type_map = context.user_data.get('type_map', {})
    key = next((k for k, v in type_map.items() if v == selected), None)
    if not key:
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π.",
            reply_markup=ReplyKeyboardMarkup([[v] for v in type_map.values()], resize_keyboard=True)
        )
        return TYPE_CHOICE

    context.user_data['type'] = key

    file_map = {
        "assault": "modules-assault.json",
        "battle": "modules-battle.json",
        "smg":     "modules-pp.json",
        "shotgun": "modules-drobovik.json",
        "marksman":"modules-pehotnay.json",
        "lmg":     "modules-pulemet.json",
        "sniper":  "modules-snayperki.json",
        "pistol":  "modules-pistolet.json",
        "special": "modules-osoboe.json"
    }
    fname = file_map.get(key)
    if not fname:
        await update.message.reply_text("‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    try:
        path = ROOT / "database" / fname
        variants = json.loads(path.read_text(encoding="utf-8"))
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    context.user_data['module_variants'] = variants
    context.user_data['module_options'] = list(variants.keys())

    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π (5 –∏–ª–∏ 8)?",
        reply_markup=ReplyKeyboardMarkup([["5"], ["8"]], resize_keyboard=True)
    )
    return MODULE_COUNT


async def get_module_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if txt not in ("5","8"):
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ 5 –∏–ª–∏ 8.")
        return MODULE_COUNT
    cnt = int(txt)
    context.user_data['module_count'] = cnt
    context.user_data['selected_modules'] = []
    context.user_data['detailed_modules'] = {}

    opts = context.user_data['module_options']
    buttons = [opts[i:i+2] for i in range(0, len(opts), 2)]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return MODULE_SELECT


async def select_modules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mod = update.message.text.strip()
    opts = context.user_data['module_options']
    if mod not in opts or mod in context.user_data['selected_modules']:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return MODULE_SELECT

    context.user_data['current_module'] = mod
    variants = context.user_data['module_variants'][mod]
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(v['en'], callback_data=v['en'])] for v in variants])
    await update.message.reply_text(f"–í–∞—Ä–∏–∞–Ω—Ç –¥–ª—è {mod}:", reply_markup=kb)
    return MODULE_SELECT


async def module_variant_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    var = q.data
    mod = context.user_data['current_module']
    context.user_data['detailed_modules'][mod] = var
    context.user_data['selected_modules'].append(mod)
    await q.edit_message_reply_markup(None)

    if len(context.user_data['selected_modules']) >= context.user_data['module_count']:
        await q.message.reply_text("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
        return IMAGE_UPLOAD

    rem = [m for m in context.user_data['module_options'] if m not in context.user_data['selected_modules']]
    btns = [rem[i:i+2] for i in range(0, len(rem), 2)]
    await q.message.reply_text("–°–ª–µ–¥—É—é—â–∏–π –º–æ–¥—É–ª—å:", reply_markup=ReplyKeyboardMarkup(btns, resize_keyboard=True))
    return MODULE_SELECT


async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    file = None
    if msg.photo:
        file = await msg.photo[-1].get_file()
    elif msg.document and msg.document.mime_type.startswith("image/"):
        file = await msg.document.get_file()
    else:
        await msg.reply_text("‚ùå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return IMAGE_UPLOAD

    os.makedirs(ROOT/"images", exist_ok=True)
    p = ROOT/"images"/f"{context.user_data['weapon'].replace(' ','_')}.jpg"
    await file.download_to_drive(str(p))
    context.user_data['image'] = str(p)

    await msg.reply_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª.",
                        reply_markup=ReplyKeyboardMarkup([["–ó–∞–≤–µ—Ä—à–∏—Ç—å"]], resize_keyboard=True))
    return CONFIRMATION


async def confirm_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new = {
        "weapon_name": context.user_data['weapon'],
        "role":        context.user_data.get('role',''),
        "category":    context.user_data.get('category',''),
        "mode":        context.user_data['mode'],
        "type":        context.user_data['type'],
        "modules":     context.user_data['detailed_modules'],
        "image":       context.user_data['image'],
        "author":      update.effective_user.full_name
    }
    try:
        logging.info(f"[ADD] Saving ‚Üí {new}")
        DB_PATH.parent.mkdir(exist_ok=True)
        arr = json.loads(DB_PATH.read_text(encoding="utf-8")) if DB_PATH.exists() else []
        arr.append(new)
        DB_PATH.write_text(json.dumps(arr, indent=2, ensure_ascii=False), encoding="utf-8")
        logging.info("[ADD] Saved to %s", DB_PATH)
    except Exception:
        logging.exception("[ADD] Save failed")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return ConversationHandler.END

    await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                                    reply_markup=ReplyKeyboardMarkup([["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë"], ["‚óÄ –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
    return POST_CONFIRM


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


add_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É"), add_start),
        CommandHandler("add", add_start)
    ],
    states={
        WEAPON_NAME:     [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weapon_name)],
        ROLE_INPUT:      [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weapon_role)],
        CATEGORY_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_category)],
        MODE_SELECT:     [MessageHandler(filters.TEXT & ~filters.COMMAND, get_mode)],
        TYPE_CHOICE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, get_type)],
        MODULE_COUNT:    [MessageHandler(filters.TEXT & ~filters.COMMAND, get_module_count)],
        MODULE_SELECT:   [
            MessageHandler(filters.TEXT & ~filters.COMMAND, select_modules),
            CallbackQueryHandler(module_variant_callback)
        ],
        IMAGE_UPLOAD:    [MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_image)],
        CONFIRMATION:    [MessageHandler(filters.Regex("^–ó–∞–≤–µ—Ä—à–∏—Ç—å$"), confirm_build)],
        POST_CONFIRM:    [
            MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë$"), add_start),
            MessageHandler(filters.Regex("^‚óÄ –û—Ç–º–µ–Ω–∞$"), cancel)
        ]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)
