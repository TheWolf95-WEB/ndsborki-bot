import os
import json
import logging
import pathlib
import traceback

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from utils.permissions import admin_only
from utils.db import load_weapon_types

HERE = pathlib.Path(__file__).resolve().parent
ROOT = HERE.parent
DB_PATH = ROOT / "database" / "builds.json"

# –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
(
    WEAPON_NAME,
    ROLE_INPUT,
    CATEGORY_SELECT,
    MODE_SELECT,
    TYPE_CHOICE,
    MODULE_COUNT,
    MODULE_SELECT,
    IMAGE_UPLOAD,
    CONFIRMATION,
    POST_CONFIRM
) = range(10)

@admin_only
async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† <b>–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–æ–∫ –≤–∫–ª—é—á—ë–Ω</b>\n\n"
        "üìå –°–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–±–æ—Ä–∫—É.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ—Å—Ç–∏ <code>/cancel</code>, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        parse_mode="HTML"
    )
    # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä—É–∂–∏—è
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è:", reply_markup=ReplyKeyboardRemove())
    return WEAPON_NAME

async def get_weapon_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['weapon'] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –æ—Ä—É–∂–∏—è:")
    return ROLE_INPUT

async def get_weapon_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['role'] = update.message.text.strip()
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    buttons = [["–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞"], ["–ú–µ—Ç–∞"], ["–ù–æ–≤–∏–Ω–∫–∏"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return CATEGORY_SELECT

async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['category'] = update.message.text.strip()
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–∂–∏–º–∞ (–∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ Warzone)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=ReplyKeyboardMarkup([["Warzone"]], resize_keyboard=True)
    )
    return MODE_SELECT

async def get_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = update.message.text.strip()

    weapon_types = load_weapon_types()
    if not weapon_types:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    # –ì–æ—Ç–æ–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á‚Üí–º–µ—Ç–∫–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è
    context.user_data['type_map'] = {wt['key']: wt['label'] for wt in weapon_types}
    type_labels = list(context.user_data['type_map'].values())
    # –†–∞–∑–±–∏–≤–∞–µ–º –º–µ—Ç–∫–∏ –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    buttons = [type_labels[i:i+2] for i in range(0, len(type_labels), 2)]

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return TYPE_CHOICE

# --- –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è add_conv! ---
async def get_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_type_label = update.message.text.strip()
    type_map = context.user_data.get('type_map', {})
    # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç–∫–µ
    type_key = next((k for k, v in type_map.items() if v == selected_type_label), None)
    if not type_key:
        # –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup([[v] for v in type_map.values()], resize_keyboard=True)
        )
        return TYPE_CHOICE

    context.user_data['type'] = type_key

    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è —Ñ–∞–π–ª—É –º–æ–¥—É–ª–µ–π
    file_map = {
        "assault": "modules-assault.json",
        "battle": "modules-battle.json",
        "smg":     "modules-pp.json",
        "shotgun": "modules-drobovik.json",
        "marksman":"modules-pehotnay.json",
        "lmg":     "modules-pulemet.json",
        "sniper":  "modules-snayperki.json",
        "pistol":  "modules-pistolet.json",
        "special": "modules-osoboe.json"
    }
    fname = file_map.get(type_key)
    if not fname:
        await update.message.reply_text("‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–¥—É–ª–µ–π
    try:
        path = ROOT / "database" / fname
        variants = json.loads(path.read_text(encoding="utf-8"))
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π: {e}", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–¥—É–ª–µ–π –∏ –∏—Ö —Å–ø–∏—Å–æ–∫
    context.user_data['module_variants'] = variants
    context.user_data['module_options'] = list(variants.keys())

    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (5 –∏–ª–∏ 8)?",
        reply_markup=ReplyKeyboardMarkup([["5"], ["8"]], resize_keyboard=True)
    )
    return MODULE_COUNT

async def get_module_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    count_text = update.message.text.strip()
    if count_text not in ("5", "8"):
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ 5 –∏–ª–∏ 8.")
        return MODULE_COUNT
    module_count = int(count_text)
    context.user_data['module_count'] = module_count
    context.user_data['selected_modules'] = []
    context.user_data['detailed_modules'] = {}

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    module_list = context.user_data['module_options']
    buttons = [module_list[i:i+2] for i in range(0, len(module_list), 2)]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return MODULE_SELECT

async def select_modules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    module_name = update.message.text.strip()
    available_options = context.user_data.get('module_options', [])
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –º–æ–¥—É–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω
    if module_name not in available_options or module_name in context.user_data['selected_modules']:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return MODULE_SELECT

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ–º—ã–π –º–æ–¥—É–ª—å
    context.user_data['current_module'] = module_name
    variants = context.user_data['module_variants'][module_name]
    # –°—Ç—Ä–æ–∏–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    inline_buttons = [[InlineKeyboardButton(v['en'], callback_data=v['en'])] for v in variants]
    variant_keyboard = InlineKeyboardMarkup(inline_buttons)
    await update.message.reply_text(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è ¬´{module_name}¬ª:", reply_markup=variant_keyboard)
    return MODULE_SELECT

async def module_variant_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected_variant = query.data
    module_name = context.user_data.get('current_module')
    if not module_name:
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥—É–ª—è.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    context.user_data['detailed_modules'][module_name] = selected_variant
    context.user_data['selected_modules'].append(module_name)
    # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    await query.edit_message_reply_markup(reply_markup=None)

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –º–æ–¥—É–ª–∏ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if len(context.user_data['selected_modules']) >= context.user_data['module_count']:
        await query.message.reply_text("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏ (—Å–∫—Ä–∏–Ω—à–æ—Ç):", reply_markup=ReplyKeyboardRemove())
        return IMAGE_UPLOAD

    # –ò–Ω–∞—á–µ ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –º–æ–¥—É–ª—å
    remaining = [m for m in context.user_data['module_options'] if m not in context.user_data['selected_modules']]
    next_buttons = [remaining[i:i+2] for i in range(0, len(remaining), 2)]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º–æ–¥—É–ª—å:", reply_markup=ReplyKeyboardMarkup(next_buttons, resize_keyboard=True))
    return MODULE_SELECT

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    file_obj = None
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª–∏–±–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –ª–∏–±–æ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if message.photo:
        file_obj = await message.photo[-1].get_file()
    elif message.document and message.document.mime_type and message.document.mime_type.startswith("image/"):
        file_obj = await message.document.get_file()
    else:
        await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç).")
        return IMAGE_UPLOAD

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É–¥–∞ —Ñ–∞–π–ª
    os.makedirs(ROOT / "images", exist_ok=True)
    image_filename = f"{context.user_data['weapon'].replace(' ', '_')}.jpg"
    image_path = ROOT / "images" / image_filename
    await file_obj.download_to_drive(str(image_path))
    context.user_data['image'] = str(image_path)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å
    await message.reply_text(
        "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏.",
        reply_markup=ReplyKeyboardMarkup([["–ó–∞–≤–µ—Ä—à–∏—Ç—å"]], resize_keyboard=True)
    )
    return CONFIRMATION

async def confirm_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("‚úÖ confirm_build –í–´–ó–í–ê–ù")
    print("üõ† –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤:", DB_PATH)
    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —Å–±–æ—Ä–∫–∏ –∏–∑ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    new_build = {
        "weapon_name": context.user_data.get('weapon', ''),
        "role":        context.user_data.get('role', ''),
        "category":    context.user_data.get('category', ''),
        "mode":        context.user_data.get('mode', ''),
        "type":        context.user_data.get('type', ''),
        "modules":     context.user_data.get('detailed_modules', {}),
        "image":       context.user_data.get('image', ''),
        "author":      update.effective_user.full_name
    }
    logging.info("[ADD] ‚û§ confirm_build triggered, new_build = %r", new_build)

    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è builds.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        DB_PATH.parent.mkdir(parents=True, exist_ok=True)
        logging.info("[ADD] DB_PATH = %s", DB_PATH)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å
        if DB_PATH.exists():
            existing_data = json.loads(DB_PATH.read_text(encoding="utf-8"))
        else:
            existing_data = []
        logging.info("[ADD] before save: %d records", len(existing_data))

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–±–æ—Ä–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        existing_data.append(new_build)
        DB_PATH.write_text(json.dumps(existing_data, indent=2, ensure_ascii=False), encoding="utf-8")
        logging.info("[ADD] write_text succeeded")

        # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        updated_data = json.loads(DB_PATH.read_text(encoding="utf-8"))
        logging.info("[ADD] after save: %d records, last entry = %r", len(updated_data), updated_data[-1])

    except Exception:
        logging.exception("[ADD] ‚ùå saving failed")
        await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await update.message.reply_text(
        "‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=ReplyKeyboardMarkup(
            [["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Å–±–æ—Ä–∫—É"], ["‚óÄ –û—Ç–º–µ–Ω–∞"]],
            resize_keyboard=True
        )
    )
    return POST_CONFIRM

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–±–æ—Ä–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
add_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É"), add_start),
        CommandHandler("add", add_start)
    ],
    states={
        WEAPON_NAME:     [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weapon_name)],
        ROLE_INPUT:      [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weapon_role)],
        CATEGORY_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_category)],
        MODE_SELECT:     [MessageHandler(filters.TEXT & ~filters.COMMAND, get_mode)],
        TYPE_CHOICE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, get_type)],
        MODULE_COUNT:    [MessageHandler(filters.TEXT & ~filters.COMMAND, get_module_count)],
        MODULE_SELECT:   [
            MessageHandler(filters.TEXT & ~filters.COMMAND, select_modules),
            CallbackQueryHandler(module_variant_callback)
        ],
        IMAGE_UPLOAD:    [MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_image)],
        CONFIRMATION:    [MessageHandler(filters.Regex("^–ó–∞–≤–µ—Ä—à–∏—Ç—å$"), confirm_build)],
        POST_CONFIRM:    [
            MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Å–±–æ—Ä–∫—É$"), add_start),
            MessageHandler(filters.Regex("^‚óÄ –û—Ç–º–µ–Ω–∞$"), cancel)
        ]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)
