import os
import json
import logging
import pathlib

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from utils.permissions import admin_only
from utils.db import load_weapon_types

HERE = pathlib.Path(__file__).resolve().parent
ROOT = HERE.parent
DB_PATH = ROOT / "database" / "builds.json"

# –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
(
    WEAPON_NAME,
    ROLE_INPUT,
    CATEGORY_SELECT,
    MODE_SELECT,
    TYPE_CHOICE,
    MODULE_COUNT,
    MODULE_SELECT,
    IMAGE_UPLOAD,
    CONFIRMATION,
    POST_CONFIRM
) = range(10)


@admin_only
async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† <b>–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–æ–∫ –≤–∫–ª—é—á—ë–Ω</b>\n\n"
        "üìå –°–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–±–æ—Ä–∫—É.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ—Å—Ç–∏ <code>/cancel</code>, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä—É–∂–∏—è
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è:")
    return WEAPON_NAME


async def get_weapon_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['weapon'] = update.message.text.strip()
    # –ó–∞–ø—Ä–æ—Å —Ä–æ–ª–∏
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –æ—Ä—É–∂–∏—è:")
    return ROLE_INPUT


async def get_weapon_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['role'] = update.message.text.strip()
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    buttons = [["–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞"], ["–ú–µ—Ç–∞"], ["–ù–æ–≤–∏–Ω–∫–∏"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return CATEGORY_SELECT


async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text not in ("–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞", "–ú–µ—Ç–∞", "–ù–æ–≤–∏–Ω–∫–∏"):
        # –ü–æ–≤—Ç–æ—Ä–∏–º –≤—ã–±–æ—Ä
        buttons = [["–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞"], ["–ú–µ—Ç–∞"], ["–ù–æ–≤–∏–Ω–∫–∏"]]
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–Ω–æ–ø–∫–æ–π.",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        )
        return CATEGORY_SELECT

    context.user_data['category'] = text
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–∂–∏–º–∞ (–∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ Warzone)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=ReplyKeyboardMarkup([["Warzone"]], resize_keyboard=True)
    )
    return MODE_SELECT


async def get_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() != "warzone":
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º ¬´Warzone¬ª –∫–Ω–æ–ø–∫–æ–π.",
            reply_markup=ReplyKeyboardMarkup([["Warzone"]], resize_keyboard=True)
        )
        return MODE_SELECT

    context.user_data['mode'] = text
    weapon_types = load_weapon_types()
    if not weapon_types:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    # –ì–æ—Ç–æ–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á‚Üí–º–µ—Ç–∫–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è
    context.user_data['type_map'] = {wt['key']: wt['label'] for wt in weapon_types}
    labels = list(context.user_data['type_map'].values())
    # –†–∞–∑–±–∏–≤–∞–µ–º –º–µ—Ç–∫–∏ –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    buttons = [labels[i:i+2] for i in range(0, len(labels), 2)]

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return TYPE_CHOICE


async def get_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected = update.message.text.strip()
    type_map = context.user_data.get('type_map', {})
    key = next((k for k, v in type_map.items() if v == selected), None)
    if not key:
        # –ü–æ–≤—Ç–æ—Ä–∏–º –≤—ã–±–æ—Ä
        buttons = [[v] for v in type_map.values()]
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π.",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        )
        return TYPE_CHOICE

    context.user_data['type'] = key

    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ ‚Üí —Ñ–∞–π–ª –º–æ–¥—É–ª–µ–π
    file_map = {
        "assault":  "modules-assault.json",
        "battle":   "modules-battle.json",
        "smg":      "modules-pp.json",
        "shotgun":  "modules-drobovik.json",
        "marksman": "modules-pehotnay.json",
        "lmg":      "modules-pulemet.json",
        "sniper":   "modules-snayperki.json",
        "pistol":   "modules-pistolet.json",
        "special":  "modules-osoboe.json",
    }
    fname = file_map.get(key)
    if not fname:
        await update.message.reply_text(
            "‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    try:
        path = ROOT / "database" / fname
        variants = json.loads(path.read_text(encoding="utf-8"))
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π: {e}",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –∫–ª—é—á–∏
    context.user_data['module_variants'] = variants
    context.user_data['module_options'] = list(variants.keys())

    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (5 –∏–ª–∏ 8)?",
        reply_markup=ReplyKeyboardMarkup([["5"], ["8"]], resize_keyboard=True)
    )
    return MODULE_COUNT


async def get_module_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text not in ("5", "8"):
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ 5 –∏–ª–∏ 8.")
        return MODULE_COUNT

    count = int(text)
    context.user_data['module_count'] = count
    context.user_data['selected_modules'] = []
    context.user_data['detailed_modules'] = {}

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    opts = context.user_data['module_options']
    buttons = [opts[i:i+2] for i in range(0, len(opts), 2)]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return MODULE_SELECT


async def select_modules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    module = update.message.text.strip()
    opts = context.user_data.get('module_options', [])
    if module not in opts or module in context.user_data['selected_modules']:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return MODULE_SELECT

    context.user_data['current_module'] = module
    variants = context.user_data['module_variants'][module]
    # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    inline = [
        [InlineKeyboardButton(v['en'], callback_data=v['en'])]
        for v in variants
    ]
    await update.message.reply_text(
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è ¬´{module}¬ª:",
        reply_markup=InlineKeyboardMarkup(inline)
    )
    return MODULE_SELECT


async def module_variant_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data
    mod = context.user_data.get('current_module')
    if not mod:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª—è.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    context.user_data['detailed_modules'][mod] = choice
    context.user_data['selected_modules'].append(mod)
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    await query.edit_message_reply_markup(None)

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –º–æ–¥—É–ª–∏ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    if len(context.user_data['selected_modules']) >= context.user_data['module_count']:
        await query.message.reply_text(
            "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏ (—Å–∫—Ä–∏–Ω—à–æ—Ç):",
            reply_markup=ReplyKeyboardRemove()
        )
        return IMAGE_UPLOAD

    # –ò–Ω–∞—á–µ ‚Äî –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–æ–¥—É–ª—å
    remaining = [m for m in context.user_data['module_options'] if m not in context.user_data['selected_modules']]
    buttons = [remaining[i:i+2] for i in range(0, len(remaining), 2)]
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º–æ–¥—É–ª—å:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return MODULE_SELECT


async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    file_obj = None
    if msg.photo:
        file_obj = await msg.photo[-1].get_file()
    elif msg.document and msg.document.mime_type.startswith("image/"):
        file_obj = await msg.document.get_file()
    else:
        await msg.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return IMAGE_UPLOAD

    os.makedirs(ROOT / "images", exist_ok=True)
    fname = f"{context.user_data['weapon'].replace(' ', '_')}.jpg"
    path = ROOT / "images" / fname
    await file_obj.download_to_drive(str(path))
    context.user_data['image'] = str(path)

    await msg.reply_text(
        "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardMarkup([["–ó–∞–≤–µ—Ä—à–∏—Ç—å"]], resize_keyboard=True)
    )
    return CONFIRMATION


async def confirm_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    new_build = {
        "weapon_name": context.user_data.get('weapon', ''),
        "role":        context.user_data.get('role', ''),
        "category":    context.user_data.get('category', ''),
        "mode":        context.user_data.get('mode', ''),
        "type":        context.user_data.get('type', ''),
        "modules":     context.user_data.get('detailed_modules', {}),
        "image":       context.user_data.get('image', ''),
        "author":      update.effective_user.full_name
    }
    logging.info("[ADD] New build: %r", new_build)

    try:
        DB_PATH.parent.mkdir(parents=True, exist_ok=True)
        if DB_PATH.exists():
            data = json.loads(DB_PATH.read_text(encoding="utf-8"))
        else:
            data = []
        data.append(new_build)
        DB_PATH.write_text(json.dumps(data, indent=2, ensure_ascii=False), encoding="utf-8")
    except Exception:
        logging.exception("[ADD] Save failed")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    await update.message.reply_text(
        "‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=ReplyKeyboardMarkup([["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Å–±–æ—Ä–∫—É"], ["‚óÄ –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return POST_CONFIRM


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


add_conv = ConversationHandler(
    entry_points=[
        CommandHandler("add", add_start),
        MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É$"), add_start),
    ],
    states={
        WEAPON_NAME:     [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weapon_name)],
        ROLE_INPUT:      [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weapon_role)],
        CATEGORY_SELECT: [MessageHandler(filters.Regex("^(–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞|–ú–µ—Ç–∞|–ù–æ–≤–∏–Ω–∫–∏)$"), get_category)],
        MODE_SELECT:     [MessageHandler(filters.Regex("^Warzone$"), get_mode)],
        TYPE_CHOICE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, get_type)],
        MODULE_COUNT:    [MessageHandler(filters.Regex("^[58]$"), get_module_count)],
        MODULE_SELECT:   [
            MessageHandler(filters.TEXT & ~filters.COMMAND, select_modules),
            CallbackQueryHandler(module_variant_callback),
        ],
        IMAGE_UPLOAD:    [MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_image)],
        CONFIRMATION:    [MessageHandler(filters.Regex("^–ó–∞–≤–µ—Ä—à–∏—Ç—å$"), confirm_build)],
        POST_CONFIRM:    [
            MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Å–±–æ—Ä–∫—É$"), add_start),
            MessageHandler(filters.Regex("^‚óÄ –û—Ç–º–µ–Ω–∞$"), cancel),
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

__all__ = ["add_conv"]
