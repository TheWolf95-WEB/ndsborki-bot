import json
import logging
import pathlib

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
)
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)

from utils.db import load_db, load_weapon_types, get_type_label_by_key
from utils.translators import load_translation_dict
from utils.permissions import admin_only

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
VIEW_CATEGORY_SELECT, VIEW_WEAPON, VIEW_SET_COUNT, VIEW_DISPLAY = range(4)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
RAW_CATEGORIES = {
    "–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞": "üî• –¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞",
    "–ú–µ—Ç–∞":       "üìà –ú–µ—Ç–∞",
    "–ù–æ–≤–∏–Ω–∫–∏":    "üÜï –ù–æ–≤–∏–Ω–∫–∏",
}


@admin_only
async def view_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton(lbl, callback_data=f"cat|{key}")]
        for key, lbl in RAW_CATEGORIES.items()
    ]
    await update.message.reply_text(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏:",
        reply_markup=InlineKeyboardMarkup(buttons),
    )
    return VIEW_CATEGORY_SELECT


async def on_category_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, category = query.data.split("|", 1)
    context.user_data["selected_category"] = category

    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ—Ä—É–∂–∏—è
    data = load_db()
    type_keys = sorted({
        b["type"] for b in data
        if b.get("mode", "").lower() == "warzone"
           and b.get("category") == category
    })
    if not type_keys:
        return await query.edit_message_text("‚ö†Ô∏è –ù–µ—Ç —Å–±–æ—Ä–æ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    # Inline-–∫–Ω–æ–ø–∫–∏: –∫–∞–∂–¥—ã–π —Ç–∏–ø + ¬´–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º¬ª
    key_to_label = {wt["key"]: wt["label"] for wt in load_weapon_types()}
    buttons = [
        [InlineKeyboardButton(key_to_label.get(k, k), callback_data=f"type|{k}")]
        for k in type_keys
    ]
    buttons.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="restart")])

    await query.edit_message_text(
        f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {RAW_CATEGORIES[category]}\n‚û° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è:",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="HTML"
    )
    return VIEW_WEAPON


async def on_type_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, type_key = query.data.split("|", 1)
    context.user_data["selected_type"] = type_key
    category = context.user_data["selected_category"]

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä—É–∂–∏—è –ø–æ —Ç–∏–ø—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    weapon_list = sorted({
        b["weapon_name"] for b in load_db()
        if b["type"] == type_key and b.get("category") == category
    })
    if not weapon_list:
        return await query.edit_message_text("‚ö†Ô∏è –ü–æ —ç—Ç–æ–º—É —Ç–∏–ø—É –Ω–µ—Ç –æ—Ä—É–∂–∏—è.")

    # Inline-–∫–Ω–æ–ø–∫–∏: –∫–∞–∂–¥–æ–µ –æ—Ä—É–∂–∏–µ + ¬´–ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º¬ª
    buttons = [
        [InlineKeyboardButton(w, callback_data=f"weapon|{w}")]
        for w in weapon_list
    ]
    buttons.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º", callback_data="back_type")])

    await query.edit_message_text(
        f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {RAW_CATEGORIES[category]}\n"
        f"üî´ <b>–¢–∏–ø:</b> {get_type_label_by_key(type_key)}\n\n"
        "‚û° –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ:",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="HTML"
    )
    return VIEW_SET_COUNT


async def on_weapon_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, weapon = query.data.split("|", 1)
    context.user_data["selected_weapon"] = weapon

    category = context.user_data["selected_category"]
    type_key = context.user_data["selected_type"]
    data = load_db()

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±–æ—Ä–æ–∫ –ø–æ –º–æ–¥—É–ª—è–º
    c5 = sum(
        1 for b in data
        if b["weapon_name"] == weapon
           and b["type"] == type_key
           and len(b["modules"]) == 5
           and b.get("category") == category
    )
    c8 = sum(
        1 for b in data
        if b["weapon_name"] == weapon
           and b["type"] == type_key
           and len(b["modules"]) == 8
           and b.get("category") == category
    )

    # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª—è
    buttons = [[
        InlineKeyboardButton(f"5 –º–æ–¥—É–ª–µ–π ({c5})", callback_data=f"view|5|0"),
        InlineKeyboardButton(f"8 –º–æ–¥—É–ª–µ–π ({c8})", callback_data=f"view|8|0"),
    ]]
    # –î–æ–±–∞–≤–∏–º ¬´–ù–∞–∑–∞–¥ –∫ –æ—Ä—É–∂–∏—é¬ª
    buttons.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –æ—Ä—É–∂–∏—é", callback_data="back_weapon")])

    await query.edit_message_text(
        f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {RAW_CATEGORIES[category]}\n"
        f"üî´ <b>–¢–∏–ø:</b> {get_type_label_by_key(type_key)}\n"
        f"‚öîÔ∏è <b>–û—Ä—É–∂–∏–µ:</b> {weapon}\n\n"
        "‚û° –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="HTML"
    )
    return VIEW_DISPLAY


async def on_view_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥—É–ª–µ–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    callback_data = "view|<count>|<index>"
    """
    query = update.callback_query
    await query.answer()
    _, count_str, idx_str = query.data.split("|")
    count = int(count_str)
    idx = int(idx_str)

    category = context.user_data["selected_category"]
    type_key = context.user_data["selected_type"]
    weapon = context.user_data["selected_weapon"]

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–±–æ—Ä–∫–∏
    filtered = [
        b for b in load_db()
        if b["type"] == type_key
           and b["weapon_name"] == weapon
           and len(b["modules"]) == count
           and b.get("category") == category
    ]
    if not filtered:
        return await query.edit_message_text("‚ö†Ô∏è –°–±–æ—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ—Ç.")

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    idx %= len(filtered)
    context.user_data["viewed_builds"] = filtered
    context.user_data["current_count"] = count
    context.user_data["current_index"] = idx

    build = filtered[idx]
    translation = load_translation_dict(type_key)
    modules = "\n".join(
        f"‚îú {k}: {translation.get(v, v)}"
        for k, v in build["modules"].items()
    )
    caption = (
        f"üìå <b>–û—Ä—É–∂–∏–µ:</b> {build['weapon_name']}\n"
        f"üéØ <b>–†–æ–ª—å:</b> {build.get('role','-')}\n"
        f"üî´ <b>–¢–∏–ø:</b> {get_type_label_by_key(type_key)}\n\n"
        f"üß© <b>–ú–æ–¥—É–ª–∏ ({count}):</b>\n{modules}\n\n"
        f"‚úç <b>–ê–≤—Ç–æ—Ä:</b> {build['author']}"
    )

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    prev_idx = (idx - 1) % len(filtered)
    next_idx = (idx + 1) % len(filtered)
    nav = []
    if len(filtered) > 1:
        nav.append(
            InlineKeyboardButton("‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"view|{count}|{prev_idx}")
        )
        nav.append(
            InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°", callback_data=f"view|{count}|{next_idx}")
        )
    # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    nav.append(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º", callback_data="back_count"))
    nav.append(InlineKeyboardButton("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="restart"))

    markup = InlineKeyboardMarkup([nav])

    img_path = build.get("image")
    if img_path and pathlib.Path(img_path).exists():
        media = InputMediaPhoto(open(img_path, "rb"), caption=caption, parse_mode="HTML")
        await query.edit_message_media(media=media, reply_markup=markup)
    else:
        await query.edit_message_text(caption, reply_markup=markup, parse_mode="HTML")

    return VIEW_DISPLAY


# --- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ¬´–ù–∞–∑–∞–¥¬ª —Ö—ç–Ω–¥–ª–µ—Ä—ã ---

async def on_back_to_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # —ç–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    query.data = f"cat|{context.user_data['selected_category']}"
    return await on_category_selected(update, context)

async def on_back_to_weapon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # —ç–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞
    query.data = f"type|{context.user_data['selected_type']}"
    return await on_type_selected(update, context)

async def on_back_to_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # —ç–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –æ—Ä—É–∂–∏—è
    query.data = f"weapon|{context.user_data['selected_weapon']}"
    return await on_weapon_selected(update, context)


async def on_restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await view_start(update, context)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler
view_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("^üìã –°–±–æ—Ä–∫–∏ Warzone$"), view_start),
    ],
    states={
        VIEW_CATEGORY_SELECT: [
            CallbackQueryHandler(on_category_selected, pattern="^cat\\|")
        ],
        VIEW_WEAPON: [
            CallbackQueryHandler(on_type_selected, pattern="^type\\|"),
            CallbackQueryHandler(on_restart,    pattern="^restart$"),
        ],
        VIEW_SET_COUNT: [
            CallbackQueryHandler(on_weapon_selected, pattern="^weapon\\|"),
            CallbackQueryHandler(on_back_to_type,    pattern="^back_type$"),
        ],
        VIEW_DISPLAY: [
            CallbackQueryHandler(on_view_callback,     pattern="^view\\|"),
            CallbackQueryHandler(on_back_to_weapon,    pattern="^back_weapon$"),
            CallbackQueryHandler(on_back_to_count,     pattern="^back_count$"),
            CallbackQueryHandler(on_restart,           pattern="^restart$"),
        ],
    },
    fallbacks=[
        CommandHandler("cancel", lambda u, c: u.callback_query.message.reply_text(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None
        )),
    ],
)

__all__ = ["view_conv"]
