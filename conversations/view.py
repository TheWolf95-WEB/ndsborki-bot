# conversations/view.py

import os
import json
import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InputFile
)
from telegram.ext import (
    ConversationHandler,
    MessageHandler,
    CommandHandler,
    CallbackContext,
    ContextTypes,
    filters
)
from utils.db import load_db, load_weapon_types
from utils.translators import load_translation_dict, get_type_label_by_key
from utils.permissions import admin_only

# –®–∞–≥–∏ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
VIEW_CATEGORY_SELECT, VIEW_WEAPON, VIEW_SET_COUNT, VIEW_DISPLAY = range(4)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
RAW_CATEGORIES = {
    "–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞": "üî• –¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞",
    "–ú–µ—Ç–∞":       "üìà –ú–µ—Ç–∞",
    "–ù–æ–≤–∏–Ω–∫–∏":    "üÜï –ù–æ–≤–∏–Ω–∫–∏"
}

@admin_only
async def view_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–≤—ã–π —à–∞–≥: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    buttons = [[label] for label in RAW_CATEGORIES.values()]
    await update.message.reply_text(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    )
    return VIEW_CATEGORY_SELECT

async def view_category_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ç–æ—Ä–æ–π —à–∞–≥: –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –æ—Ä—É–∂–∏—è."""
    text = update.message.text.strip()
    # –ù–∞—Ö–æ–¥–∏–º ¬´–∫–ª—é—á¬ª –ø–æ —ç–º–æ–¥–∂–∏-–º–µ—Ç–∫–µ
    category = next((k for k, lbl in RAW_CATEGORIES.items() if lbl == text), None)
    if not category:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á—Ç–æ-—Ç–æ –ª–∏—à–Ω–µ–µ
        buttons = [[lbl] for lbl in RAW_CATEGORIES.values()]
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–Ω–æ–ø–∫–æ–π.",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        )
        return VIEW_CATEGORY_SELECT

    context.user_data['selected_category'] = category

    # –ò–∑ –±–∞–∑—ã –±–µ—Ä—ë–º –≤—Å–µ —Å–±–æ—Ä–∫–∏
    data = load_db()
    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–∏–ø–æ–≤ –ø–æ mode=Warzone –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    type_keys = sorted({
        b['type']
        for b in data
        if b.get("mode","").lower() == "warzone"
           and b.get("category") == category
    })

    if not type_keys:
        await update.message.reply_text(
            "‚ö†Ô∏è –°–±–æ—Ä–æ–∫ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    # –ú–∞–ø–ø–∏–Ω–≥ key->label –∏–∑ types.json
    key_to_label = {wt['key']: wt['label'] for wt in load_weapon_types()}
    # –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
    context.user_data['label_to_key'] = {lbl: k for k, lbl in key_to_label.items()}

    buttons = [[key_to_label.get(t, t)] for t in type_keys]
    await update.message.reply_text(
        "‚û° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    )
    return VIEW_WEAPON

async def view_select_weapon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢—Ä–µ—Ç–∏–π —à–∞–≥: –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è."""
    label = update.message.text.strip()
    key = context.user_data['label_to_key'].get(label)
    if not key:
        buttons = [[lbl] for lbl in context.user_data['label_to_key'].keys()]
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–∫–æ–π.",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        )
        return VIEW_WEAPON

    context.user_data['selected_type'] = key

    data = load_db()
    weapon_names = sorted({
        b['weapon_name']
        for b in data
        if b['type'] == key
           and b.get('category') == context.user_data['selected_category']
    })

    if not weapon_names:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ—Ç —Å–±–æ—Ä–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    context.user_data['available_weapons'] = weapon_names
    buttons = [[name] for name in weapon_names]
    await update.message.reply_text(
        "‚û° –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    )
    return VIEW_SET_COUNT

async def view_set_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–µ—Ç–≤—ë—Ä—Ç—ã–π —à–∞–≥: –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥—É–ª–µ–π."""
    weapon = update.message.text.strip()
    context.user_data['selected_weapon'] = weapon

    data = load_db()
    key = context.user_data['selected_type']
    # –°—á–∏—Ç–∞–µ–º –ø–æ 5 –∏ 8 –º–æ–¥—É–ª–µ–π
    count_5 = sum(1 for b in data if b['weapon_name']==weapon and b['type']==key and len(b['modules'])==5)
    count_8 = sum(1 for b in data if b['weapon_name']==weapon and b['type']==key and len(b['modules'])==8)

    # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    buttons = [[f"5 ({count_5})", f"8 ({count_8})"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    )
    return VIEW_DISPLAY

async def view_display_builds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—è—Ç—ã–π —à–∞–≥: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–±–æ—Ä–∫—É –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é."""
    raw = update.message.text.strip()
    try:
        count = int(raw.split()[0])
    except:
        await update.message.reply_text("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´5 (...)¬ª –∏–ª–∏ ¬´8 (...)¬ª.")
        return VIEW_DISPLAY

    context.user_data['selected_count'] = count
    data = load_db()
    filtered = [
        b for b in data
        if b['type'] == context.user_data['selected_type']
           and b['weapon_name'] == context.user_data['selected_weapon']
           and len(b['modules']) == count
           and b.get('category') == context.user_data['selected_category']
    ]

    if not filtered:
        # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö (—Ö–æ—Ç—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞ –Ω–æ–ª—å) ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≤—ã–±–æ—Ä—É count
        return await view_set_count(update, context)

    context.user_data['viewed_builds'] = filtered
    context.user_data['current_index'] = 0
    return await send_build(update, context)

async def send_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥ –æ–¥–Ω–æ–π —Å–±–æ—Ä–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É current_index."""
    idx = context.user_data['current_index']
    build = context.user_data['viewed_builds'][idx]
    translation = load_translation_dict(build['type'])

    modules_text = "\n".join(
        f"‚îú {k}: {translation.get(v, v)}"
        for k, v in build['modules'].items()
    )

    caption = (
        f"üìå <b>–û—Ä—É–∂–∏–µ:</b> {build['weapon_name']}\n"
        f"üéØ <b>–î–∏—Å—Ç–∞–Ω—Ü–∏—è:</b> {build.get('role','-')}\n"
        f"üî´ <b>–¢–∏–ø:</b> {get_type_label_by_key(build['type'])}\n\n"
        f"üß© <b>–ú–æ–¥—É–ª–∏:</b> {len(build['modules'])}\n{modules_text}\n\n"
        f"‚úç <b>–ê–≤—Ç–æ—Ä:</b> {build['author']}"
    )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏/–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è
    nav = []
    row = []
    if idx > 0:
        row.append("‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∞—è")
    if idx < len(context.user_data['viewed_builds']) - 1:
        row.append("‚û° –°–ª–µ–¥—É—é—â–∞—è")
    nav.append(row)
    nav.append(["üìã –°–±–æ—Ä–∫–∏ Warzone"])

    markup = ReplyKeyboardMarkup(nav, resize_keyboard=True, one_time_keyboard=False)

    img_path = build.get('image')
    if img_path and os.path.exists(img_path):
        with open(img_path, 'rb') as img:
            await update.message.reply_photo(
                photo=InputFile(img),
                caption=caption,
                reply_markup=markup,
                parse_mode="HTML"
            )
    else:
        await update.message.reply_text(
            caption,
            reply_markup=markup,
            parse_mode="HTML"
        )
    return VIEW_DISPLAY

async def next_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data['current_index'] < len(context.user_data['viewed_builds']) - 1:
        context.user_data['current_index'] += 1
    return await send_build(update, context)

async def previous_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data['current_index'] > 0:
        context.user_data['current_index'] -= 1
    return await send_build(update, context)

# –°–æ–±–∏—Ä–∞–µ–º ConversationHandler
view_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("^üìã –°–±–æ—Ä–∫–∏ Warzone$"), view_start)
    ],
    states={
        VIEW_CATEGORY_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, view_category_selected)],
        VIEW_WEAPON:          [MessageHandler(filters.TEXT & ~filters.COMMAND, view_select_weapon)],
        VIEW_SET_COUNT:       [MessageHandler(filters.TEXT & ~filters.COMMAND, view_set_count)],
        VIEW_DISPLAY: [
            MessageHandler(filters.Regex("^[58]"), view_display_builds),
            MessageHandler(filters.Regex("^‚û° –°–ª–µ–¥—É—é—â–∞—è$"), next_build),
            MessageHandler(filters.Regex("^‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∞—è$"), previous_build),
            MessageHandler(filters.Regex("^üìã –°–±–æ—Ä–∫–∏ Warzone$"), view_start),
        ],
    },
    fallbacks=[
        CommandHandler("cancel", lambda u,c: u.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()))
    ]
)

__all__ = ["view_conv"]
