import os
import json
import logging
import asyncio
from collections import Counter
from datetime import datetime
from telegram import Update
from telegram.ext import CommandHandler, ContextTypes
from utils.permissions import admin_only
from utils.keyboards import get_main_menu

DB_PATH = "database/builds.json"
ADMIN_ID = int(os.getenv("ADMIN_ID"))


@admin_only
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists(DB_PATH):
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    try:
        with open(DB_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ë–î: {e}")
        return

    try:
        proc = await asyncio.create_subprocess_exec(
            "systemctl", "is-active", "ndsborki.service",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )
        out, err = await proc.communicate()
        service_status = (out or err).decode().strip()
    except Exception as e:
        service_status = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ systemd: {e}"

    total = len(data)
    formatted_time = datetime.fromtimestamp(
        os.path.getmtime(DB_PATH)
    ).strftime("%d.%m.%Y %H:%M")

    authors = Counter(b.get("author", "‚Äî") for b in data)
    categories = Counter(b.get("category", "‚Äî") for b in data)

    msg = [
        f"üñ• <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:</b> <code>{service_status}</code>",
        f"üì¶ <b>–í—Å–µ–≥–æ —Å–±–æ—Ä–æ–∫:</b> <code>{total}</code>",
        f"üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> <code>{formatted_time}</code>",
        "",
        "üë• <b>–ê–≤—Ç–æ—Ä—ã:</b>"
    ]
    msg += [f"‚Ä¢ <b>{name}</b> ‚Äî <code>{count}</code>" for name, count in authors.most_common()]

    if categories:
        msg.append("\nüìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–±–æ—Ä–æ–∫:</b>")
        msg += [f"‚Ä¢ <b>{cat}</b> ‚Äî <code>{count}</code>" for cat, count in categories.items()]

    await update.message.reply_text("\n".join(msg), parse_mode="HTML")


@admin_only
async def get_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        proc = await asyncio.create_subprocess_exec(
            "journalctl", "-u", "ndsborki.service", "-n", "30", "--no-pager",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )
        out, err = await proc.communicate()
        logs = (out or err).decode().strip() or "‚ö†Ô∏è –õ–æ–≥–∏ –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:</b>\n<pre>{logs}</pre>",
            parse_mode="HTML"
        )
        await update.message.reply_text("üì§ –õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–∞–Ω–∞–ª.")
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏.")


@admin_only
async def check_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_map = {
        "assault": "modules-assault.json",
        "battle": "modules-battle.json",
        "smg": "modules-pp.json",
        "shotgun": "modules-drobovik.json",
        "marksman": "modules-pehotnay.json",
        "lmg": "modules-pulemet.json",
        "sniper": "modules-snayperki.json",
        "pistol": "modules-pistolet.json",
        "special": "modules-osoboe.json"
    }

    msg_lines = ["üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ /database:"]
    for key, fname in file_map.items():
        path = f"database/{fname}"
        status = "–Ω–∞–π–¥–µ–Ω" if os.path.exists(path) else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        icon = "‚úÖ" if status == "–Ω–∞–π–¥–µ–Ω" else "‚ùå"
        msg_lines.append(f"{icon} {key}: <code>{fname}</code> ‚Äî {status}")

    await update.message.reply_text("\n".join(msg_lines), parse_mode="HTML")


@admin_only
async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    kb = get_main_menu(user.id)

    # –°–æ–æ–±—â–∞–µ–º –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    await update.message.reply_text(
        "üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶",
        reply_markup=kb
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ—Å—Ç–∞—Ä—Ç–µ
    with open("restart_message.txt", "w", encoding="utf-8") as f:
        f.write(str(user.id))

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å ‚Äî systemd –ø–æ–¥–Ω–∏–º–µ—Ç –±–æ—Ç –∑–∞–Ω–æ–≤–æ
    os._exit(0)


# üì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫
admin_handlers = [
    CommandHandler("status", status_command),
    CommandHandler("log", get_logs),
    CommandHandler("check_files", check_files),
    CommandHandler("restart", restart_bot)
]
