import os
import json
import logging
import asyncio
from collections import Counter
from datetime import datetime

from telegram import Update
from telegram.ext import CommandHandler, ContextTypes

from utils.permissions import admin_only
from utils.keyboards import get_main_menu

DB_PATH = "database/builds.json"
ADMIN_ID = int(os.getenv("ADMIN_ID"))


@admin_only
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
    if not os.path.exists(DB_PATH):
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    try:
        with open(DB_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ë–î: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
    try:
        proc = await asyncio.create_subprocess_exec(
            "/usr/bin/systemctl", "is-active", "ndsborki.service",
            stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )
        out, err = await proc.communicate()
        service_status = (out or err).decode().strip()
    except Exception as e:
        service_status = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ systemd: {e}"

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total = len(data)
    authors = Counter(b.get("author", "‚Äî") for b in data)
    categories = Counter(b.get("category", "‚Äî") for b in data)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ
    last_commit_time = "‚Äî"
    last_commit_files = []
    try:
        proc2 = await asyncio.create_subprocess_exec(
            "git", "log", "-1", "--format=%ci", "--name-only",
            cwd=os.getcwd(),
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        out2, err2 = await proc2.communicate()
        lines = (out2 or err2).decode().splitlines()
        if lines:
            last_commit_time = lines[0].strip()
            last_commit_files = [ln for ln in lines[1:] if ln.strip()]
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = [
        f"üñ• <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:</b> <code>{service_status}</code>",
        f"üì¶ <b>–í—Å–µ–≥–æ —Å–±–æ—Ä–æ–∫:</b> <code>{total}</code>",
        "",
        f"üïë <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:</b> <code>{last_commit_time}</code>"
    ]
    if last_commit_files:
        msg.append("üìÅ <b>–§–∞–π–ª—ã –≤ –∫–æ–º–º–∏—Ç–µ:</b>")
        msg.extend(f"‚Ä¢ <code>{fn}</code>" for fn in last_commit_files)

    msg.append("")
    msg.append("üë• <b>–ê–≤—Ç–æ—Ä—ã:</b>")
    msg.extend(f"‚Ä¢ <b>{name}</b> ‚Äî <code>{count}</code>"
               for name, count in authors.most_common())

    if categories:
        msg.append("")
        msg.append("üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–±–æ—Ä–æ–∫:</b>")
        msg.extend(f"‚Ä¢ <b>{cat}</b> ‚Äî <code>{count}</code>"
                   for cat, count in categories.items())

    await update.message.reply_text("\n".join(msg), parse_mode="HTML")


@admin_only
async def get_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        proc = await asyncio.create_subprocess_exec(
            "journalctl", "-u", "ndsborki.service", "-n", "30", "--no-pager",
            stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )
        out, err = await proc.communicate()
        logs = (out or err).decode().strip() or "‚ö†Ô∏è –õ–æ–≥–∏ –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:</b>\n<pre>{logs}</pre>",
            parse_mode="HTML"
        )
        await update.message.reply_text("üì§ –õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–∞–Ω–∞–ª.")
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏.")


@admin_only
async def check_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_map = {
        "assault": "modules-assault.json",
        "battle": "modules-battle.json",
        "smg": "modules-pp.json",
        "shotgun": "modules-drobovik.json",
        "marksman": "modules-pehotnay.json",
        "lmg": "modules-pulemet.json",
        "sniper": "modules-snayperki.json",
        "pistol": "modules-pistolet.json",
        "special": "modules-osoboe.json"
    }

    lines = ["üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ /database:"]
    for key, fname in file_map.items():
        path = f"database/{fname}"
        icon = "‚úÖ" if os.path.exists(path) else "‚ùå"
        status = "–Ω–∞–π–¥–µ–Ω" if icon == "‚úÖ" else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        lines.append(f"{icon} {key}: <code>{fname}</code> ‚Äî {status}")

    await update.message.reply_text("\n".join(lines), parse_mode="HTML")


@admin_only
async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = get_main_menu(update.effective_user.id)

    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞‚Ä¶", reply_markup=kb)

    # Git pull –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    try:
        proc = await asyncio.create_subprocess_exec(
            "git", "pull", "origin", "main",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        out, err = await proc.communicate()
        rc = proc.returncode
        out, err = out.decode().strip(), err.decode().strip()
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞:\n<pre>{e}</pre>",
            parse_mode="HTML", reply_markup=kb
        )
        return

    if rc != 0:
        msg = err or out or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞:\n<pre>{msg}</pre>",
            parse_mode="HTML", reply_markup=kb
        )
        return

    # –ì–ª–∞–≤–Ω–æ–µ: –≤—ã—Ö–æ–¥–∏–º –∏ –¥–∞—ë–º systemd –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
    os._exit(0)


restart_handler = CommandHandler("restart", restart_bot)


# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω-—Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
admin_handlers = [
    CommandHandler("status", status_command),
    CommandHandler("log", get_logs),
    CommandHandler("check_files", check_files),
    restart_handler
]
