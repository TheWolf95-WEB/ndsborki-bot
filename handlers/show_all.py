# handlers/show_all.py

import os
import json
from telegram import Update
from telegram.ext import CommandHandler, ContextTypes

# –ü—É—Ç—å –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ñ–∞–π–ª–∞ —Å–±–æ—Ä–æ–∫
ROOT    = os.path.dirname(os.path.dirname(__file__))
DB_PATH = os.path.join(ROOT, "database", "builds.json")

# –≠–º–æ–¥–∑–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
EMOJI_WEAPON   = "üî´"
EMOJI_CATEGORY = "üìÅ"
EMOJI_TYPE     = "üõ†"
EMOJI_MODULES  = "üî©"
EMOJI_AUTHOR   = "üë§"

# –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ (—Å–∏–º–≤–æ–ª–æ–≤)
COL_WIDTH = 36

async def show_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
    try:
        with open(DB_PATH, encoding="utf-8") as f:
            builds = json.load(f)
    except Exception as e:
        return await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å builds.json: {e}")

    if not builds:
        return await update.message.reply_text("‚ÑπÔ∏è –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–±–æ—Ä–∫–∏.")

    # 2) –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä—ã –ø–æ –¥–≤–µ —Å–±–æ—Ä–∫–∏
    pairs = [builds[i:i+2] for i in range(0, len(builds), 2)]

    # 3) –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º <pre>-–±–ª–æ–∫
    for pair in pairs:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª–µ–≤–æ–π –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–æ–∫
        left = format_build(pair[0])
        right = format_build(pair[1]) if len(pair) > 1 else [""] * 4

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –∫–∞–∂–¥–æ–≥–æ –ø–æ 4 —Å—Ç—Ä–æ–∫–∏
        while len(left) < 4:   left.append("")
        while len(right) < 4:  right.append("")

        # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        lines = []
        for l, r in zip(left, right):
            # –û–±—Ä–µ–∑–∞–µ–º –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
            l = (l[:COL_WIDTH-3] + "...") if len(l) > COL_WIDTH else l
            l = l.ljust(COL_WIDTH)
            lines.append(f"{l}  {r}")

        text = "<pre>" + "\n".join(lines) + "</pre>"
        await update.message.reply_text(text, parse_mode="HTML")

def format_build(b: dict) -> list[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ 4 —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–¥–Ω–æ–π —Å–±–æ—Ä–∫–∏:
      0: üî´ –ù–∞–∑–≤–∞–Ω–∏–µ
      1: üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è | üõ† –¢–∏–ø | üî©N
      2: (—Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –Ω–µ –≤—ã–≤–æ–¥–∏–º –∑–¥–µ—Å—å, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ)
      3: üë§ –ê–≤—Ç–æ—Ä
    """
    name = b.get("weapon_name", "‚Äî")
    cat  = b.get("category",     "‚Äî")
    typ  = b.get("type",         "‚Äî")
    cnt  = len(b.get("modules", {}))
    auth = b.get("author",      "‚Äî")

    line0 = f"{EMOJI_WEAPON} <b>{name}</b>"
    line1 = f"{EMOJI_CATEGORY} {cat} | {EMOJI_TYPE} {typ} | {EMOJI_MODULES} {cnt}"
    line2 = ""  # –º–æ–∂–Ω–æ —Å—é–¥–∞ –≤–∫—Ä–∞—Ç—Ü–µ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å, –Ω–æ —è –æ—Å—Ç–∞–≤–∏–ª –ø—É—Å—Ç—ã–º
    line3 = f"{EMOJI_AUTHOR} {auth}"

    return [line0, line1, line2, line3]

show_all_handler = CommandHandler("show_all", show_all)
