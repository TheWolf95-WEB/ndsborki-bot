# handlers/show_all.py

import os
import json
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

ROOT     = os.path.dirname(os.path.dirname(__file__))
DB_PATH  = os.path.join(ROOT, "database", "builds.json")
PAGE_SIZE = 5

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —ç–º–æ–¥–∑–∏ (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–æ–ª–µ–º "category" –≤ JSON)
CATEGORY_EMOJI = {
    "–ú–µ—Ç–∞": "üìà",
    "–ù–æ–≤–∏–Ω–∫–∏": "üÜï",
    "–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞": "üî•",
}

async def show_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 1: –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    # —á–∏—Ç–∞–µ–º –≤—Å–µ —Å–±–æ—Ä–∫–∏
    try:
        with open(DB_PATH, encoding="utf-8") as f:
            builds = json.load(f)
    except:
        return await update.message.reply_text("‚ÑπÔ∏è –ë–∞–∑–∞ —Å–±–æ—Ä–æ–∫ –ø—É—Å—Ç–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # —Å—á–∏—Ç–∞–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    counts = {}
    for b in builds:
        cat = b.get("category", "‚Äî")
        counts[cat] = counts.get(cat, 0) + 1

    # —Å–æ–±–µ—Ä—ë–º –∫–Ω–æ–ø–∫–∏: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–∫–æ–ª-–≤–æ)
    buttons = []
    for cat, emoji in CATEGORY_EMOJI.items():
        cnt = counts.get(cat, 0)
        buttons.append(
            InlineKeyboardButton(
                f"{emoji} {cat} ({cnt})",
                callback_data=f"showcat|{cat}|1"
            )
        )
    markup = InlineKeyboardMarkup([buttons])
    await update.message.reply_text(
        "üì¶ <b>–í—Å–µ —Å–±–æ—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

async def show_category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 2 –∏ 3: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–±–æ—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()

    # —Ä–∞–∑–æ–±—Ä–∞—Ç—å callback_data = "showcat|<category>|<page>"
    _, category, page_str = query.data.split("|")
    page = int(page_str)

    # —á–∏—Ç–∞–µ–º —Å–±–æ—Ä–∫–∏
    with open(DB_PATH, encoding="utf-8") as f:
        builds = [b for b in json.load(f) if b.get("category") == category]

    total = len(builds)
    pages = (total + PAGE_SIZE - 1) // PAGE_SIZE
    start = (page-1) * PAGE_SIZE
    end   = start + PAGE_SIZE
    chunk = builds[start:end]

    # —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    lines = [f"üìÇ <b>–°–±–æ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª ({total}):</b>"]
    for idx, b in enumerate(chunk, start=start+1):
        # –Ω–∞–π–¥—ë–º –∫—Ä–∞—Å–∏–≤—ã–π –ª–µ–π–±–ª —Ç–∏–ø–∞
        typ_key = b.get("type", "")
        # –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –µ—Å—Ç—å —É—Ç–∏–ª–∏—Ç–∞ load_weapon_types()
        from utils.db import load_weapon_types
        types = {wt["key"]: wt["label"] for wt in load_weapon_types()}
        typ_label = types.get(typ_key, typ_key)

        lines.append(
            f"\n<b>{idx}. {b.get('weapon_name','‚Äî')}</b>\n"
            f"‚îú üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {b.get('role','-')}\n"
            f"‚îú ‚öôÔ∏è –¢–∏–ø: {typ_label}\n"
            f"‚îú üî© –ú–æ–¥—É–ª–µ–π: {len(b.get('modules', {}))}\n"
            f"‚îî üë§ –ê–≤—Ç–æ—Ä: {b.get('author','-')}"
        )

    text = "\n".join(lines)

    # –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ ¬´–Ω–∞–∑–∞–¥¬ª
    nav = []
    if page > 1:
        nav.append(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=f"showcat|{category}|{page-1}"))
    if page < pages:
        nav.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚Üí", callback_data=f"showcat|{category}|{page+1}"))
    # –≤–Ω–∏–∑—É –≤—Å–µ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ ¬´–Ω–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º¬ª
    nav.append(InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="showcat|_back|0"))

    markup = InlineKeyboardMarkup([nav])

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=markup)

async def back_to_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º¬ª."""
    query = update.callback_query
    if not query:  # –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        return await show_all_command(update, context)
    await query.answer()
    await show_all_command(query, context)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
show_all_handler      = CommandHandler("show_all", show_all_command)
showcat_callback      = CallbackQueryHandler(show_category_callback, pattern=r"^showcat\|[^|]+\|\d+$")
backcat_callback      = CallbackQueryHandler(back_to_categories, pattern=r"^showcat\|\_back\|0$")
