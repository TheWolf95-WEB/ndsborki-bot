# handlers/show_all.py

import os
import json
from telegram import Update
from telegram.ext import CommandHandler, ContextTypes

# –ü—É—Ç—å –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ñ–∞–π–ª–∞ —Å–±–æ—Ä–æ–∫
ROOT    = os.path.dirname(os.path.dirname(__file__))
DB_PATH = os.path.join(ROOT, "database", "builds.json")

async def show_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏ —á–∏—Ç–∞–µ–º
    if not os.path.exists(DB_PATH):
        return await update.message.reply_text("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ —Å–±–æ—Ä–æ–∫ –ø—É—Å—Ç.")

    try:
        with open(DB_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        return await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å builds.json: {e}")

    if not data:
        return await update.message.reply_text("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ —Å–±–æ—Ä–æ–∫ –ø—É—Å—Ç.")

    # 2) –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    lines = ["üìÑ <b>–í—Å–µ —Å–±–æ—Ä–∫–∏:</b>"]
    for idx, b in enumerate(data, start=1):
        name = b.get("weapon_name", "‚Äî")
        role = b.get("role", "-")
        typ  = b.get("type", "‚Äî")
        cnt  = len(b.get("modules", {}))
        auth = b.get("author", "‚Äî")

        lines.append(
            f"\n<b>{idx}. {name}</b>\n"
            f"‚îú üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {role}\n"
            f"‚îú ‚öôÔ∏è –¢–∏–ø: {typ}\n"
            f"‚îú üî© –ú–æ–¥—É–ª–µ–π: {cnt}\n"
            f"‚îî üë§ –ê–≤—Ç–æ—Ä: {auth}"
        )

    # 3) –°–∫–ª–µ–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    text = "\n".join(lines)
    await update.message.reply_text(text, parse_mode="HTML")

show_all_handler = CommandHandler("show_all", show_all_command)
