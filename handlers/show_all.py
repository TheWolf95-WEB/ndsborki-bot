# handlers/show_all.py

import os
import json
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –∏ builds.json
ROOT     = os.path.dirname(os.path.dirname(__file__))
DB_PATH  = os.path.join(ROOT, "database", "builds.json")
PAGE_SIZE = 5

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏
CATEGORIES = [
    ("–ú–µ—Ç–∞",        "üìà"),
    ("–ù–æ–≤–∏–Ω–∫–∏",     "üÜï"),
    ("–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞","üî•"),
]

async def show_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/show_all ‚Üí –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–±–æ—Ä–∫–∏, —á—Ç–æ–±—ã –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å
    try:
        with open(DB_PATH, encoding="utf-8") as f:
            builds = json.load(f)
    except:
        builds = []

    # –°—á–∏—Ç–∞–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    counts = {}
    for b in builds:
        counts[b.get("category","‚Äî")] = counts.get(b.get("category","‚Äî"), 0) + 1

    text = (
        "üì¶ <b>–í—Å–µ —Å–±–æ—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )

    # –°—Ç—Ä–æ–∏–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
    buttons = [
        [InlineKeyboardButton(f"{emoji} {name} ({counts.get(name,0)})",
                              callback_data=f"CAT|{name}|1")]
        for name, emoji in CATEGORIES
    ]
    markup = InlineKeyboardMarkup(buttons)

    await update.message.reply_text(text, parse_mode="HTML", reply_markup=markup)
    context.user_data.pop("showall_state", None)


async def category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    # data = "CAT|<category>|<page>"
    _, category, page_str = query.data.split("|")
    page = int(page_str)

    context.user_data["showall_state"] = {"category": category, "page": page}
    await _send_page(update, context)


async def navigation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‚Üê –ù–∞–∑–∞–¥ / –í–ø–µ—Ä—ë–¥ ‚Üí / üè† –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
    text = update.message.text
    state = context.user_data.get("showall_state")

    # –µ—Å–ª–∏ ¬´üè† –ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª –∏–ª–∏ state –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –∑–∞–Ω–æ–≤–æ /show_all
    if text == "üè† –ö–∞—Ç–µ–≥–æ—Ä–∏–∏" or not state:
        return await show_all_command(update, context)

    category = state["category"]
    page     = state["page"]

    if text == "‚Üê –ù–∞–∑–∞–¥":
        page = max(1, page - 1)
    elif text == "–í–ø–µ—Ä—ë–¥ ‚Üí":
        page += 1
    else:
        return  # –Ω–µ –Ω–∞—à–∞ –∫–Ω–æ–ø–∫–∞

    context.user_data["showall_state"]["page"] = page

    # —ç–º—É–ª–∏—Ä—É–µ–º callback_query
    fake = update
    fake.callback_query = update.message
    fake.callback_query.data = f"CAT|{category}|{page}"
    await category_callback(fake, context)


async def _send_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∏ –æ–±—ã—á–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é."""
    state = context.user_data["showall_state"]
    category = state["category"]
    page     = state["page"]

    # —á–∏—Ç–∞–µ–º —Å–±–æ—Ä–∫–∏
    try:
        with open(DB_PATH, encoding="utf-8") as f:
            all_builds = json.load(f)
    except:
        return await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—ã.")

    builds = [b for b in all_builds if b.get("category") == category]
    total = len(builds)
    pages = (total + PAGE_SIZE - 1) // PAGE_SIZE

    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º page
    page = max(1, min(page, pages))
    start = (page - 1) * PAGE_SIZE
    chunk = builds[start:start + PAGE_SIZE]

    # —Ç–µ–∫—Å—Ç
    header = (
        f"üìÇ <b>–°–±–æ—Ä–∫–∏ ¬´{category}¬ª</b>\n"
        f"–°—Ç—Ä. {page}/{pages} ‚Äî –≤—Å–µ–≥–æ {total}\n\n"
    )
    lines = [header]
    for idx, b in enumerate(chunk, start + 1):
        lines.append(
            f"<b>{idx}. {b.get('weapon_name','‚Äî')}</b>\n"
            f"‚îú üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {b.get('role','-')}\n"
            f"‚îú ‚öôÔ∏è –¢–∏–ø: {b.get('type','‚Äî')}\n"
            f"‚îú üî© –ú–æ–¥—É–ª–µ–π: {len(b.get('modules',{}))}\n"
            f"‚îî üë§ –ê–≤—Ç–æ—Ä: {b.get('author','‚Äî')}\n"
        )

    text = "\n".join(lines).strip()

    # —Å—Ç—Ä–æ–∏–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav = []
    if page > 1:       nav.append("‚Üê –ù–∞–∑–∞–¥")
    if page < pages:   nav.append("–í–ø–µ—Ä—ë–¥ ‚Üí")
    nav.append("üè† –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")

    reply_kb = ReplyKeyboardMarkup([nav], resize_keyboard=True, one_time_keyboard=True)

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (callback) –∏–ª–∏ —à–ª—ë–º –Ω–æ–≤–æ–µ (–∫–æ–º–∞–Ω–¥–∞)
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_kb)
    else:
        await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_kb)


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
show_all_handler   = CommandHandler("show_all", show_all_command)
category_cb        = CallbackQueryHandler(category_callback, pattern=r"^CAT\|")
navigation_handler = MessageHandler(
    filters.Regex(r"^(‚Üê –ù–∞–∑–∞–¥|–í–ø–µ—Ä—ë–¥ ‚Üí|üè† –ö–∞—Ç–µ–≥–æ—Ä–∏–∏)$"),
    navigation_handler
)
