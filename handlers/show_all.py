# handlers/show_all.py
import os
import json
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ParseMode,
)
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ROOT = os.path.dirname(os.path.dirname(__file__))
DB_PATH = os.path.join(ROOT, "database", "builds.json")
PAGE_SIZE = 5

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJI = {
    "–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞": "üî•",
    "–ú–µ—Ç–∞":       "üìà",
    "–ù–æ–≤–∏–Ω–∫–∏":    "üÜï",
}


def load_builds() -> list[dict]:
    if not os.path.exists(DB_PATH):
        return []
    with open(DB_PATH, "r", encoding="utf-8") as f:
        return json.load(f)


def make_categories_keyboard(builds: list[dict]) -> InlineKeyboardMarkup:
    # —Å—á–∏—Ç–∞–µ–º —Å–±–æ—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    counts: dict[str,int] = {}
    for b in builds:
        counts[b.get("category","‚Äî")] = counts.get(b.get("category","‚Äî"), 0) + 1

    buttons = []
    for cat, emoji in CATEGORY_EMOJI.items():
        cnt = counts.get(cat, 0)
        # callback_data = cat ‚Äî –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        buttons.append([InlineKeyboardButton(f"{emoji} {cat} ({cnt})", callback_data=f"cat|{cat}|0")])
    return InlineKeyboardMarkup(buttons)


def make_page_keyboard(category: str, page: int, total: int) -> InlineKeyboardMarkup:
    kb = []
    # ¬´‚¨Ö¬ª –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if page > 0:
        kb.append(InlineKeyboardButton("‚¨Ö –ü—Ä–µ–¥.", callback_data=f"cat|{category}|{page-1}"))
    # ¬´‚û°¬ª –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è
    if (page+1)*PAGE_SIZE < total:
        kb.append(InlineKeyboardButton("–°–ª–µ–¥. ‚û°", callback_data=f"cat|{category}|{page+1}"))
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    kb.append(InlineKeyboardButton("üè† –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back|0|0"))
    # –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    return InlineKeyboardMarkup([[b] for b in kb])


async def show_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    builds = load_builds()
    total = len(builds)
    text = (
        f"üì¶ <b>–í—Å–µ —Å–±–æ—Ä–∫–∏</b> (<code>{total}</code>)\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–±–æ—Ä–∫–∏ –≤ –Ω–µ–π:"
    )
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=make_categories_keyboard(builds)
    )


async def category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è:
    - cat|<–ö–∞—Ç–µ–≥–æ—Ä–∏—è>|<–°—Ç—Ä–∞–Ω–∏—Ü–∞>
    - back|0|0
    """
    query = update.callback_query
    await query.answer()

    data = query.data.split("|")
    action = data[0]

    builds = load_builds()

    if action == "back":
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        total = len(builds)
        text = (
            f"üì¶ <b>–í—Å–µ —Å–±–æ—Ä–∫–∏</b> (<code>{total}</code>)\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–±–æ—Ä–∫–∏ –≤ –Ω–µ–π:"
        )
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=make_categories_keyboard(builds)
        )
        return

    # –∏–Ω–∞—á–µ action == "cat"
    category = data[1]
    page = int(data[2])

    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–±–æ—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    filtered = [b for b in builds if b.get("category") == category]
    total_in_cat = len(filtered)

    # –æ—Ç—Ä–µ–∑–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    chunk = filtered[page*PAGE_SIZE:(page+1)*PAGE_SIZE]

    # —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    lines = [f"üìÇ <b>–°–±–æ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª</b> (<code>{total_in_cat}</code>)\n"]
    for idx, b in enumerate(chunk, start=page*PAGE_SIZE + 1):
        name = b.get("weapon_name", "‚Äî")
        role = b.get("role", "-")
        typ  = b.get("type", "‚Äî")
        cnt  = len(b.get("modules", {}))
        auth = b.get("author", "‚Äî")

        lines.append(
            f"<b>{idx}. {name}</b>\n"
            f"‚îú üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {role}\n"
            f"‚îú ‚öôÔ∏è –¢–∏–ø: {typ}\n"
            f"‚îú üî© –ú–æ–¥—É–ª–µ–π: {cnt}\n"
            f"‚îî üë§ –ê–≤—Ç–æ—Ä: {auth}\n"
        )

    # –ø—Ä–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ¬´–ø—Ä–µ–¥/—Å–ª–µ–¥/–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º¬ª
    kb = make_page_keyboard(category, page, total_in_cat)

    await query.edit_message_text(
        "\n".join(lines),
        parse_mode=ParseMode.HTML,
        reply_markup=kb
    )


# —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–∞ —Ö—ç–Ω–¥–ª–µ—Ä–∞
show_all_handler       = CommandHandler("show_all", show_all_command)
show_all_callback      = CallbackQueryHandler(category_callback, pattern="^(cat|back)\|")
