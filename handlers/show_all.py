# handlers/show_all.py

import os
import json
from telegram import Update
from telegram.ext import CommandHandler, ContextTypes

# –ü—É—Ç—å –¥–æ –≤–∞—à–µ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ñ–∞–π–ª–∞ —Å–±–æ—Ä–æ–∫
ROOT = os.path.dirname(os.path.dirname(__file__))
DB_PATH = os.path.join(ROOT, "database", "builds.json")

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJI = {
    "–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞": "üî•",
    "–ú–µ—Ç–∞":       "üìà",
    "–ù–æ–≤–∏–Ω–∫–∏":    "üÜï"
}
# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
COL_WIDTH = 38

async def show_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–≥—Ä—É–∑–∫–∞ JSON
    try:
        with open(DB_PATH, encoding="utf-8") as f:
            builds = json.load(f)
    except FileNotFoundError:
        return await update.message.reply_text("‚ùå –§–∞–π–ª —Å–±–æ—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        return await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–±–æ—Ä–æ–∫: {e}")

    if not builds:
        return await update.message.reply_text("‚ÑπÔ∏è –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–±–æ—Ä–∫–∏.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –ø–æ —Å–±–æ—Ä–∫–µ
    blocks = []
    for b in builds:
        name = b.get("weapon_name", "‚Äî")
        cat  = b.get("category", "‚Äî")
        typ  = b.get("type", "‚Äî")
        cnt  = len(b.get("modules", {}))
        auth = b.get("author", "‚Äî")

        emoji_cat = CATEGORY_EMOJI.get(cat, "")
        # –°–æ–±–∏—Ä–∞–µ–º HTML-–±–ª–æ–∫
        block = (
            f"<b>üî´ {name}</b>\n"
            f"{emoji_cat} <i>{cat}</i> | <i>{typ}</i> | üî© <b>{cnt}</b>\n"
            f"üë§ {auth}"
        )
        blocks.append(block)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä—ã (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏)
    pairs = [blocks[i:i+2] for i in range(0, len(blocks), 2)]

    # –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —Å—Ç—Ä–æ–∏–º –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã–π <pre> –±–ª–æ–∫
    for left_right in pairs:
        left = left_right[0].split("\n")
        right = left_right[1].split("\n") if len(left_right) == 2 else ["", "", ""]

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –æ–±–æ–∏—Ö –ø–æ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
        while len(left) < 3:  left.append("")
        while len(right) < 3: right.append("")

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        lines = []
        for i in range(3):
            l = left[i]
            r = right[i]
            # –æ–±—Ä–µ–∑–∞–µ–º/–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
            if len(l) > COL_WIDTH:
                l = l[:COL_WIDTH-3] + "..."
            l = l.ljust(COL_WIDTH)
            lines.append(f"{l}  {r}")

        text = "<pre>" + "\n".join(lines) + "</pre>"
        await update.message.reply_text(text, parse_mode="HTML")

show_all_handler = CommandHandler("show_all", show_all)
