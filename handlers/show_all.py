# handlers/show_all.py

import os
import json
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –∏ builds.json
ROOT     = os.path.dirname(os.path.dirname(__file__))
DB_PATH  = os.path.join(ROOT, "database", "builds.json")
PAGE_SIZE = 5

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–æ–ª–µ–º "category")
CATEGORY_EMOJI = {
    "–ú–µ—Ç–∞": "üìà",
    "–ù–æ–≤–∏–Ω–∫–∏": "üÜï",
    "–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞": "üî•",
}

async def show_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 1: /show_all ‚Äî –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    try:
        with open(DB_PATH, encoding="utf-8") as f:
            builds = json.load(f)
    except:
        return await update.message.reply_text("‚ÑπÔ∏è –ë–∞–∑–∞ —Å–±–æ—Ä–æ–∫ –ø—É—Å—Ç–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ü–æ–¥—Å—á—ë—Ç —Å–±–æ—Ä–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    counts = {}
    for b in builds:
        cat = b.get("category", "‚Äî")
        counts[cat] = counts.get(cat, 0) + 1

    # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–Ω–ª–∞–π–Ω)
    buttons = []
    for cat, emoji in CATEGORY_EMOJI.items():
        cnt = counts.get(cat, 0)
        buttons.append(
            InlineKeyboardButton(
                f"{emoji} {cat} ({cnt})",
                callback_data=f"CAT|{cat}|1"
            )
        )

    await update.message.reply_text(
        "üì¶ <b>–í—Å–µ —Å–±–æ—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([buttons])
    )

async def category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 2: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–±–æ—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()

    # –†–∞—Å–ø–∞—Ä—Å–∏–º data: CAT|<category>|<page>
    _, category, page_str = query.data.split("|")
    page = int(page_str)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ç–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    context.user_data["showall_state"] = {"category": category, "page": page}

    # –ó–∞–≥—Ä—É–∑–∏–º –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–±–æ—Ä–∫–∏
    with open(DB_PATH, encoding="utf-8") as f:
        all_builds = json.load(f)
    builds = [b for b in all_builds if b.get("category") == category]

    total = len(builds)
    pages = (total + PAGE_SIZE - 1) // PAGE_SIZE
    start = (page - 1) * PAGE_SIZE
    chunk = builds[start:start + PAGE_SIZE]

    # –ó–∞–≥—Ä—É–∑–∏–º –ª–µ–π–±–ª—ã —Ç–∏–ø–æ–≤ –∏–∑ utils.db
    from utils.db import load_weapon_types
    type_map = {wt["key"]: wt["label"] for wt in load_weapon_types()}

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    lines = [f"üìÇ <b>–°–±–æ—Ä–∫–∏ ¬´{category}¬ª ({total}):</b>"]
    for idx, b in enumerate(chunk, start=start + 1):
        typ_label = type_map.get(b.get("type", ""), b.get("type", "‚Äî"))
        lines.append(
            f"\n<b>{idx}. {b.get('weapon_name','‚Äî')}</b>\n"
            f"‚îú üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {b.get('role','-')}\n"
            f"‚îú ‚öôÔ∏è –¢–∏–ø: {typ_label}\n"
            f"‚îú üî© –ú–æ–¥—É–ª–µ–π: {len(b.get('modules', {}))}\n"
            f"‚îî üë§ –ê–≤—Ç–æ—Ä: {b.get('author','‚Äî')}"
        )

    text = "\n".join(lines)

    # –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav = []
    if page > 1:
        nav.append("‚Üê –ù–∞–∑–∞–¥")
    if page < pages:
        nav.append("–í–ø–µ—Ä—ë–¥ ‚Üí")
    nav.append("üè† –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    reply_kb = ReplyKeyboardMarkup([nav], resize_keyboard=True, one_time_keyboard=True)

    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_kb)

async def navigation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 3: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ‚Äò‚Üê –ù–∞–∑–∞–¥‚Äô, ‚Äò–í–ø–µ—Ä—ë–¥ ‚Üí‚Äô –∏ ‚Äòüè† –ö–∞—Ç–µ–≥–æ—Ä–∏–∏‚Äô."""
    text = update.message.text
    state = context.user_data.get("showall_state")
    # –ï—Å–ª–∏ –Ω–µ—Ç state ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–æ—Å–∏–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not state or text == "üè† –ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        return await show_all_command(update, context)

    category = state["category"]
    page     = state["page"]

    if text == "‚Üê –ù–∞–∑–∞–¥":
        page = max(1, page - 1)
    elif text == "–í–ø–µ—Ä—ë–¥ ‚Üí":
        page += 1
    else:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—á–∏–µ

    # —ç–º—É–ª–∏—Ä—É–µ–º callback_data –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ category_callback
    fake = update  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç
    fake.callback_query = update.message
    fake.callback_query.data = f"CAT|{category}|{page}"
    return await category_callback(fake, context)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
show_all_handler      = CommandHandler("show_all", show_all_command)
showcat_callback      = CallbackQueryHandler(category_callback, pattern=r"^CAT\|")
navigation_handler    = MessageHandler(filters.Regex(r"^(‚Üê –ù–∞–∑–∞–¥|–í–ø–µ—Ä—ë–¥ ‚Üí|üè† –ö–∞—Ç–µ–≥–æ—Ä–∏–∏)$"), navigation_handler)
